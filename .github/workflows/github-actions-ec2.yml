name: CI/CD PIPELINE Build-Test-Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Build project
        run: |
          # Add your build commands here
          # Example: npm install, mvn clean install, etc.

test:
  name: Test
  runs-on: ubuntu-latest

  needs: [build]

  steps:
    - name: Checkout the files
      uses: actions/checkout@v2

    - name: Debugging - Print environment and network information
      run: |
        env
        ip a
        ip r

    - name: Test website availability
      run: |
        DEPLOYED_URL="http://${{ secrets.HOST_DNS }}"
        echo "Testing accessibility of $DEPLOYED_URL"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 30 $DEPLOYED_URL)
        [ $HTTP_STATUS -eq 200 ]
        echo "Website is accessible. Test passed!"

        # if [ $HTTP_STATUS -eq 200 ]; then
        #  echo "Website is accessible. Test passed!"
        # else
        #  echo "Error: Website is not accessible. HTTP Status Code: $HTTP_STATUS"
        #  exit 1
        # fi
  deploy:
    name: Deploy to EC2 on master branch push
    runs-on: ubuntu-latest

    needs: [build, test]

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Execute remote SSH commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Add your deployment commands here
            # Example: update server, restart services, etc.
            sudo apt-get -y update
            sudo apt-get install -y apache2
            sudo systemctl start apache2
            sudo systemctl enable apache2
            cd /var/www/html
            sudo mv * /var/www/html
